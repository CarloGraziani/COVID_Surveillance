clear all;
N_days = 149.0;
days = 0.0:1.0:N_days;
data = [];
vpar = [];
a = 30;
b = 500;
for i = 1:N_days+1
    N_xt = (b-a).*rand(1) + a;
    C_xt = rand(1) * N_xt;
    data_today = [days(i); cast(ceil(N_xt),'double')  ; cast(ceil(C_xt), 'double')];
    data = [data, data_today];
    %%%%%%%vpar%%%%%%%%%
    index = 1;
    mu_b = 5; sigma_b = 1;
    beta = mu_b + 1. * randn(1);
    L = 0.0025/beta;
    par = [L,0.01,beta*1E-7,0.5,20.0,10.0];
    V0 = 1e3 + 1e2 * randn
    while index <= N_xt - 1
        
end


save('data/test_data','data')

for sample_size in test_data[..., 1]:
    k = 1
    index = 1
    mu_b, sigma_b = 5, 1
    beta = np.random.normal(mu_b, sigma_b, 1)   #"rate at which virus infects host cells"
    L = 0.0025/beta
    par=np.array([[L,0.01,beta*1E-7,0.5,20.0,10.0]])
    V0 = np.random.normal(1E3, 1E2, 1)
    X0 = 1E6
    Y0 = V0
    init_state=(np.array([[V0,X0,Y0]], dtype=np.float32))

    while index <= sample_size - 1:
        beta = np.random.normal(mu_b, sigma_b, 1)   #"rate at which virus infects host cells"
        L = 0.0025/beta
        par_new=np.array([[L,0.01,beta*1E-7,0.5,20.0,10.0]])
        par = np.concatenate((par, par_new), axis = 0)
        V0 = np.random.normal(1E3, 1E2, 1)
        X0 = 1E6
        Y0 = V0
        init_state_new=(np.array([[V0,X0,Y0]], dtype=np.float32))
        init_state = np.concatenate((init_state, init_state_new), 0)

        index +=1
        

    vpar[k, :, :] = tf.constant(par, dtype=tf.float32)
    k += 1
pospar = par
sympar = par